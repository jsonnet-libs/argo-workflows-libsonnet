{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='synchronization', url='', help='"Synchronization holds synchronization lock configuration"'),
  '#mutex':: d.obj(help='"Mutex holds Mutex configuration"'),
  mutex: {
    '#withName':: d.fn(help='"name of the mutex"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { mutex+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace is the namespace of the mutex, default: [namespace of workflow]"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { mutex+: { namespace: namespace } },
  },
  '#semaphore':: d.obj(help='"SemaphoreRef is a reference of Semaphore"'),
  semaphore: {
    '#configMapKeyRef':: d.obj(help='"Selects a key from a ConfigMap."'),
    configMapKeyRef: {
      '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
      withKey(key): { semaphore+: { configMapKeyRef+: { key: key } } },
      '#withName':: d.fn(help='"Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { semaphore+: { configMapKeyRef+: { name: name } } },
      '#withOptional':: d.fn(help='"Specify whether the ConfigMap or its key must be defined"', args=[d.arg(name='optional', type=d.T.boolean)]),
      withOptional(optional): { semaphore+: { configMapKeyRef+: { optional: optional } } },
    },
    '#withNamespace':: d.fn(help='"Namespace is the namespace of the configmap, default: [namespace of workflow]"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { semaphore+: { namespace: namespace } },
  },
  '#withMutexes':: d.fn(help='"v3.6 and after: Mutexes holds the list of Mutex lock details"', args=[d.arg(name='mutexes', type=d.T.array)]),
  withMutexes(mutexes): { mutexes: if std.isArray(v=mutexes) then mutexes else [mutexes] },
  '#withMutexesMixin':: d.fn(help='"v3.6 and after: Mutexes holds the list of Mutex lock details"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='mutexes', type=d.T.array)]),
  withMutexesMixin(mutexes): { mutexes+: if std.isArray(v=mutexes) then mutexes else [mutexes] },
  '#withSemaphores':: d.fn(help='"v3.6 and after: Semaphores holds the list of Semaphores configuration"', args=[d.arg(name='semaphores', type=d.T.array)]),
  withSemaphores(semaphores): { semaphores: if std.isArray(v=semaphores) then semaphores else [semaphores] },
  '#withSemaphoresMixin':: d.fn(help='"v3.6 and after: Semaphores holds the list of Semaphores configuration"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='semaphores', type=d.T.array)]),
  withSemaphoresMixin(semaphores): { semaphores+: if std.isArray(v=semaphores) then semaphores else [semaphores] },
  '#mixin': 'ignore',
  mixin: self,
}
